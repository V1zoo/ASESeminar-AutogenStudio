{
  "provider": "autogen_core.tools.FunctionTool",
  "component_type": "tool",
  "version": 1,
  "component_version": 1,
  "description": "A tool that tests the fix",
  "label": "run_tests",
  "config": {
    "source_code": "import requests\nimport json\nimport os\nimport subprocess\nimport sys\n\ndef run_tests(index: int) -> str:\n    API_URL = \"http://localhost:8081/task/index/\"\n    try:\n        tokens= -1\n        api_url = f\"{API_URL}{index}\"\n        start_dir = os.getcwd()\n        repo_dir = os.path.join(start_dir, f\"repos\\\\repo_{index}\")\n        LOG_FILE = start_dir + \"\\\\AGSLog.txt\"\n        responseJSON = requests.get(api_url,timeout=10).json()\n        taskNumber = responseJSON['taskNumber']\n        instance_id = responseJSON['instance_id']\n        prompt = responseJSON[\"Problem_statement\"]\n        git_clone = responseJSON[\"git_clone\"]\n        fail_to_pass = json.loads(responseJSON.get(\"FAIL_TO_PASS\",\"[]\"))\n        pass_to_pass = json.loads(responseJSON.get(\"PASS_TO_PASS\",\"[]\"))\n        test_payload = {\n            \"instance_id\": instance_id, # type: ignore\n            \"repoDir\" : f\"/repos/repo_{index}\",\n            \"FAIL_TO_PASS\" : fail_to_pass, # type: ignore\n            \"PASS_TO_PASS\" : pass_to_pass, # type: ignore\n            }\n        result = requests.post(\"http://localhost:8082/test\", json=test_payload)\n        result.raise_for_status()\n        if len(result.json()) == 1:\n            os.chdir(start_dir)\n            with open(LOG_FILE, \"a\", encoding=\"utf-8\") as log:\n                log.write(f\"\\n---< TESTCASE {index} >------------\")\n                log.write(f\"\\nFailed to make any changes to the repository or\")\n                log.write(\"\\nencountered errors during evaluation\")\n                log.write(f\"\\nTotal Tokens used: {tokens}\")\n            print(f\"Test case {index} unchanged and logged\")\n        else:\n            result_raw = result.json().get(\"harnessOutput\", \"{}\")\n            result_json = json.loads(result_raw)\n            if not result_json:\n                print(f\"BenchResponseError: {result.json().get(\"error\")}\")\n                raise ValueError(f\"No data in harnessOutput - possible evaluation error\\nTotal Tokens used: {tokens}\")\n            print(result_json)\n            instance_id = next(iter(result_json))\n            tests_status = result_json[instance_id][\"tests_status\"]\n            fail_pass_results = tests_status[\"FAIL_TO_PASS\"]\n            fail_pass_passed = len(fail_pass_results[\"success\"])\n            fail_pass_total = fail_pass_passed + len(fail_pass_results[\"failure\"])\n            pass_pass_results = tests_status[\"PASS_TO_PASS\"]\n            pass_pass_passed = len(pass_pass_results[\"success\"])\n            pass_pass_total = pass_pass_passed + len(pass_pass_results[\"failure\"])\n\n                # log results\n            os.chdir(start_dir)\n            with open(LOG_FILE, \"a\", encoding=\"utf-8\") as log:\n                log.write(f\"\\n---< TESTCASE {index} >------------\")\n                log.write(f\"\\nFAIL_TO_PASS passed: {fail_pass_passed}/{fail_pass_total}\")\n                log.write(f\"\\nPASS_TO_PASS passed: {pass_pass_passed}/{pass_pass_total}\")\n                log.write(f\"\\nTotal Tokens used: {tokens}\")\n            print(f\"Test case {index} completed and logged\")\n        return \"TERMINATE\"\n    except Exception as e:\n        os.chdir(start_dir)\n        with open(LOG_FILE, \"a\", encoding=\"utf-8\") as log:\n            log.write(f\"\\n---< TESTCASE {index} >------------\")\n            log.write(f\"\\nError: {e}\")\n        print(f\"Error in test case {index}: {e}\")\n        return f\"Error: {str(e)}\"\n",
    "name": "run_tests",
    "description": "A simple calculator that performs basic arithmetic operations",
    "global_imports": ["requests", "json"],
    "has_cancellation_support": false
  }
}
