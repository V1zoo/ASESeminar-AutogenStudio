{
  "provider": "autogen_agentchat.teams.RoundRobinGroupChat",
  "component_type": "team",
  "version": 1,
  "component_version": 1,
  "description": "A small team of agents tasked to fix bugs in a github repository",
  "label": "ASETeam2",
  "config": {
    "participants": [
      {
        "provider": "autogen_agentchat.agents.AssistantAgent",
        "component_type": "agent",
        "version": 1,
        "component_version": 1,
        "description": "An agent that provides assistance with ability to use tools.",
        "label": "TaskRetrieverAgent",
        "config": {
          "name": "TaskRetrieverAgent",
          "model_client": {
            "provider": "autogen_ext.models.openai.OpenAIChatCompletionClient",
            "component_type": "model",
            "version": 1,
            "component_version": 1,
            "description": "OpenAI GPT-4o-mini",
            "label": "OpenAI GPT-4o Mini",
            "config": {
              "model": "gpt-4o-mini",
              "api_key": "",
              "base_url": "http://188.245.32.59:4000/v1"
            }
          },
          "tools": [
            {
              "provider": "autogen_core.tools.FunctionTool",
              "component_type": "tool",
              "version": 1,
              "component_version": 1,
              "description": "This tool returns the problem details corresponding to the index passed. The response has the following format: {\"index\": int, \"directory\": str, \"problem_description\": str, }",
              "label": "get_problem_details",
              "config": {
                "source_code": "import requests\nimport os\nimport subprocess\nimport json\nimport sys\n\ndef get_problem_details(index: int) -> str:\n    try:\n        API_URL = \"http://localhost:8081/task/index/\"\n        api_url = f\"{API_URL}{index}\"\n        start_dir = os.getcwd()     #get current working directory\n        repo_dir = os.path.join(start_dir, f\"repos\\\\repo_{index}\")\n        responseJSON = requests.get(api_url, timeout=10).json()\n        taskNumber = responseJSON['taskNumber']\n        instance_id = responseJSON['instance_id']\n        prompt = responseJSON[\"Problem_statement\"]\n        git_clone = responseJSON[\"git_clone\"]\n        fail_to_pass = json.loads(responseJSON.get(\"FAIL_TO_PASS\",\"[]\"))\n        pass_to_pass = json.loads(responseJSON.get(\"PASS_TO_PASS\",\"[]\"))\n        parts = git_clone.split(\"&&\")\n        clone_part = parts[0].strip()\n        checkout_part = parts[-1].strip() if len(parts) > 1 else None\n        env = os.environ.copy()\n        env[\"GIT_TERMINAL_PROMT\"] = \"0\"\n        repo_url = clone_part.split()[2]\n        if not os.path.isdir(repo_dir):\n            subprocess.run([\"git\", \"clone\", repo_url, repo_dir], check=True, env= env)\n            if checkout_part:\n                commit_hash = checkout_part.split()[-1]\n                subprocess.run([\"git\", \"checkout\", commit_hash], cwd=repo_dir, check=True, env=env)\n        \n        result = {\n            \"index\": index,\n            \"directory\": repo_dir,\n            \"problem_description\": prompt\n        }\n        return result\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n",
                "name": "get_problem_details",
                "description": "This tool returns the problem statement corresponding to the number passed",
                "global_imports": [
                  "requests",
                  "os",
                  "subprocess",
                  "json",
                  "sys"
                ],
                "has_cancellation_support": false
              }
            }
          ],
          "model_context": {
            "provider": "autogen_core.model_context.UnboundedChatCompletionContext",
            "component_type": "chat_completion_context",
            "version": 1,
            "component_version": 1,
            "description": "An unbounded chat completion context that keeps a view of the all the messages.",
            "label": "UnboundedChatCompletionContext",
            "config": {}
          },
          "description": "An agent that provides assistance with ability to use tools.",
          "system_message": "You are the head of a small team that specializes on fixing bugs in a github repository. Your team member is a software developer. You will be asked to fix a problem <index>.\nFirst use the tool get_problem_details to retrieve the problem statement and to download the corresponding files.\nThen tell the developer agent to implement the fix in the directory. The developer agent will finally run the test suite.",
          "model_client_stream": false,
          "reflect_on_tool_use": false,
          "tool_call_summary_format": "{result}"
        }
      },
      {
        "provider": "autogen_agentchat.agents.AssistantAgent",
        "component_type": "agent",
        "version": 1,
        "component_version": 1,
        "description": "An agent that provides assistance with ability to use tools.",
        "label": "DeveloperAgent",
        "config": {
          "name": "DeveloperAgent",
          "model_client": {
            "provider": "autogen_ext.models.openai.OpenAIChatCompletionClient",
            "component_type": "model",
            "version": 1,
            "component_version": 1,
            "description": "OpenAI GPT-4o-mini",
            "label": "OpenAI GPT-4o Mini",
            "config": {
              "model": "gpt-4o-mini",
              "api_key": "",
              "base_url": "http://188.245.32.59:4000/v1"
            }
          },
          "tools": [
            {
              "provider": "autogen_core.tools.FunctionTool",
              "component_type": "tool",
              "version": 1,
              "component_version": 1,
              "description": "A tool that reads the content of a file",
              "label": "file_read",
              "config": {
                "source_code": "def file_read(file_path: str) -> str:\n    try:\n        with open(file_path, 'r') as f:\n            return f.read()\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n",
                "name": "file_read",
                "description": "A simple calculator that performs basic arithmetic operations",
                "global_imports": [],
                "has_cancellation_support": false
              }
            },
            {
              "provider": "autogen_core.tools.FunctionTool",
              "component_type": "tool",
              "version": 1,
              "component_version": 1,
              "description": "A tool that writes given content to a file",
              "label": "file_write",
              "config": {
                "source_code": "def file_write(file_path: str, content: str) -> str:\n    try:\n        with open(file_path, 'w') as f:\n            f.write(content)\n        return f\"Successfully written to {file_path}\"\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n",
                "name": "file_write",
                "description": "A simple calculator that performs basic arithmetic operations",
                "global_imports": [],
                "has_cancellation_support": false
              }
            },
            {
              "provider": "autogen_core.tools.FunctionTool",
              "component_type": "tool",
              "version": 1,
              "component_version": 1,
              "description": "A tool that tests the fix",
              "label": "run_tests",
              "config": {
                "source_code": "import requests\nimport json\nimport os\nimport subprocess\nimport sys\n\ndef run_tests(index: int) -> str:\n    API_URL = \"http://localhost:8081/task/index/\"\n    try:\n        tokens= -1\n        api_url = f\"{API_URL}{index}\"\n        start_dir = os.getcwd()\n        repo_dir = os.path.join(start_dir, f\"repos\\\\repo_{index}\")\n        LOG_FILE = start_dir + \"\\\\AGSLog.txt\"\n        responseJSON = requests.get(api_url,timeout=10).json()\n        taskNumber = responseJSON['taskNumber']\n        instance_id = responseJSON['instance_id']\n        prompt = responseJSON[\"Problem_statement\"]\n        git_clone = responseJSON[\"git_clone\"]\n        fail_to_pass = json.loads(responseJSON.get(\"FAIL_TO_PASS\",\"[]\"))\n        pass_to_pass = json.loads(responseJSON.get(\"PASS_TO_PASS\",\"[]\"))\n        test_payload = {\n            \"instance_id\": instance_id, # type: ignore\n            \"repoDir\" : f\"/repos/repo_{index}\",\n            \"FAIL_TO_PASS\" : fail_to_pass, # type: ignore\n            \"PASS_TO_PASS\" : pass_to_pass, # type: ignore\n            }\n        result = requests.post(\"http://localhost:8082/test\", json=test_payload)\n        result.raise_for_status()\n        if len(result.json()) == 1:\n            os.chdir(start_dir)\n            with open(LOG_FILE, \"a\", encoding=\"utf-8\") as log:\n                log.write(f\"\\n---< TESTCASE {index} >------------\")\n                log.write(f\"\\nFailed to make any changes to the repository or\")\n                log.write(\"\\nencountered errors during evaluation\")\n                log.write(f\"\\nTotal Tokens used: {tokens}\")\n            print(f\"Test case {index} unchanged and logged\")\n        else:\n            result_raw = result.json().get(\"harnessOutput\", \"{}\")\n            result_json = json.loads(result_raw)\n            if not result_json:\n                print(f\"BenchResponseError: {result.json().get(\"error\")}\")\n                raise ValueError(f\"No data in harnessOutput - possible evaluation error\\nTotal Tokens used: {tokens}\")\n            print(result_json)\n            instance_id = next(iter(result_json))\n            tests_status = result_json[instance_id][\"tests_status\"]\n            fail_pass_results = tests_status[\"FAIL_TO_PASS\"]\n            fail_pass_passed = len(fail_pass_results[\"success\"])\n            fail_pass_total = fail_pass_passed + len(fail_pass_results[\"failure\"])\n            pass_pass_results = tests_status[\"PASS_TO_PASS\"]\n            pass_pass_passed = len(pass_pass_results[\"success\"])\n            pass_pass_total = pass_pass_passed + len(pass_pass_results[\"failure\"])\n\n                # log results\n            os.chdir(start_dir)\n            with open(LOG_FILE, \"a\", encoding=\"utf-8\") as log:\n                log.write(f\"\\n---< TESTCASE {index} >------------\")\n                log.write(f\"\\nFAIL_TO_PASS passed: {fail_pass_passed}/{fail_pass_total}\")\n                log.write(f\"\\nPASS_TO_PASS passed: {pass_pass_passed}/{pass_pass_total}\")\n                log.write(f\"\\nTotal Tokens used: {tokens}\")\n            print(f\"Test case {index} completed and logged\")\n        return \"TERMINATE\"\n    except Exception as e:\n        os.chdir(start_dir)\n        with open(LOG_FILE, \"a\", encoding=\"utf-8\") as log:\n            log.write(f\"\\n---< TESTCASE {index} >------------\")\n            log.write(f\"\\nError: {e}\")\n        print(f\"Error in test case {index}: {e}\")\n        return f\"Error: {str(e)}\"\n",
                "name": "run_tests",
                "description": "A simple calculator that performs basic arithmetic operations",
                "global_imports": ["requests", "json"],
                "has_cancellation_support": false
              }
            },
            {
              "provider": "autogen_core.tools.FunctionTool",
              "component_type": "tool",
              "version": 1,
              "component_version": 1,
              "description": "A tool that searches all the files in a given directory by a given pattern.",
              "label": "search_files",
              "config": {
                "source_code": "import re\nimport os\nimport fnmatch\n\ndef search_files(directory: str, pattern: str) -> list:\n    try:\n        matches = []\n        for root, _, filenames in os.walk(directory):\n            for filename in filenames:\n                absolute_path = os.path.join(root, filename)\n                with open(absolute_path,encoding=\"latin-1\") as f:\n                    if len(re.findall(pattern,f.read()))>0:\n                        matches.append(absolute_path)\n            for filename in fnmatch.filter(filenames, pattern):\n                absolute_path = os.path.join(root, filename)\n                matches.append(absolute_path)\n        if matches:\n            return \"\\n\".join(matches)\n        else:\n            return f\"No files found for pattern {pattern} in directory {directory}\"\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n",
                "name": "search_files",
                "description": "A simple calculator that performs basic arithmetic operations",
                "global_imports": ["re", "os", "fnmatch"],
                "has_cancellation_support": false
              }
            }
          ],
          "model_context": {
            "provider": "autogen_core.model_context.UnboundedChatCompletionContext",
            "component_type": "chat_completion_context",
            "version": 1,
            "component_version": 1,
            "description": "An unbounded chat completion context that keeps a view of the all the messages.",
            "label": "UnboundedChatCompletionContext",
            "config": {}
          },
          "description": "An agent that provides assistance with ability to use tools.",
          "system_message": "You're a professional software developer currently assigned to bug-fixing. You will be given by the TaskRetrieverAgent a directory and a problem to fix in this directory. This directory is a git-repository.\nFirst, use the tools search_files and read_file to locate the origin of the bug.\nThen fix the problem by using the tool write_file and passing the new code.\nImportant: When you are done with all the implementations, test your new code by calling the Tool run_tests.",
          "model_client_stream": false,
          "reflect_on_tool_use": false,
          "tool_call_summary_format": "{result}"
        }
      }
    ],
    "termination_condition": {
      "provider": "autogen_agentchat.base.OrTerminationCondition",
      "component_type": "termination",
      "version": 1,
      "component_version": 1,
      "description": "Termination condition that ends the conversation when either a message contains 'TERMINATE' or the maximum number of messages is reached.",
      "label": "OR Termination",
      "config": {
        "conditions": [
          {
            "provider": "autogen_agentchat.conditions.TextMentionTermination",
            "component_type": "termination",
            "version": 1,
            "component_version": 1,
            "description": "Terminate the conversation if a specific text is mentioned.",
            "label": "TextMentionTermination",
            "config": {
              "text": "TERMINATE"
            }
          },
          {
            "provider": "autogen_agentchat.conditions.MaxMessageTermination",
            "component_type": "termination",
            "version": 1,
            "component_version": 1,
            "description": "Terminate the conversation after a maximum number of messages have been exchanged.",
            "label": "MaxMessageTermination",
            "config": {
              "max_messages": 64,
              "include_agent_event": false
            }
          }
        ]
      }
    }
  }
}
